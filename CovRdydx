#include <iostream>

int main() {
    int n;
    double stdX = 0; // Use double for standard deviation to avoid integer division issues
    double CovSum = 0, a = 0, b = 0;
    int sumX = 0, sumY = 0;
    double xAvg = 0, yAvg = 0;

    // Ask the user to enter the number of values
    std::cout << "Please enter the number of x and y values (n): ";
    std::cin >> n;

    // Check if n is a positive integer
    if (n <= 0) {
        std::cout << "Please enter a positive integer." << std::endl;
        return 1; // Exit the program with an error code
    }

    // Dynamically allocate arrays for x and y values
    int* x_values = new int[n];
    int* y_values = new int[n];

    // Ask the user to enter the x values
    std::cout << "Please enter " << n << " x values:" << std::endl;
    for (int i = 0; i < n; ++i) {
        std::cin >> x_values[i];
    }

    // Ask the user to enter the y values
    std::cout << "Please enter " << n << " y values:" << std::endl;
    for (int i = 0; i < n; ++i) {
        std::cin >> y_values[i];
    }

    // Calculate the sum of x and y values
    for (int i = 0; i < n; ++i) {
        sumX += x_values[i];
        sumY += y_values[i];
    }

    // Calculate the average of x and y values
    xAvg = static_cast<double>(sumX) / n; // Cast to double to avoid integer division
    yAvg = static_cast<double>(sumY) / n; // Cast to double to avoid integer division

    // Calculate the covariance
    for (int i = 0; i < n; ++i) {
        CovSum += (x_values[i] - xAvg) * (y_values[i] - yAvg);
    }
    CovSum /= (n - 1);

    // Calculate the variance of X (stdX)
    for (int i = 0; i < n; ++i) {
        stdX += (x_values[i] - xAvg) * (x_values[i] - xAvg);
    }
    stdX /= (n - 1);

    // Check if variance is zero to avoid division by zero
    if (stdX == 0) {
        std::cout << "Standard deviation of X is 0. Cannot compute the regression line." << std::endl;
    } else {
        // Calculate the slope 'a' and intercept 'b'
        a = CovSum / stdX;
        b = yAvg - (a * xAvg);

        // Output the linear regression equation
        if (b == 0) {
            std::cout << "The linear line is y = " << a << "x" << std::endl;
        } else if (b < 0) {
            std::cout << "The linear line is y = " << a << "x " << b << std::endl;
        } else {
            std::cout << "The linear line is y = " << a << "x + " << b << std::endl;
        }
    }

    // Deallocate the dynamically allocated memory
    delete[] x_values;
    delete[] y_values;

    return 0;
}
